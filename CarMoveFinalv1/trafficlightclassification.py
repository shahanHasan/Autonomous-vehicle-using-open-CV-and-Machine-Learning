# -*- coding: utf-8 -*-
"""TrafficLightClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rNby0AY564KNR583453wrGfvXb9Yb1yp
"""

!git clone https://bitbucket.org/jadslim/german-traffic-signs
!ls german-traffic-sign

import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.models import Sequential
from keras.optimizers import Adam
from keras.layers import Dense
from keras.layers import Flatten, Dropout
from keras.utils.np_utils import to_categorical
from keras.layers.convolutional import Conv2D, MaxPooling2D
import random
import pickle
import pandas as pd
import cv2

# pickle file , save sth on disk , it can be serialized 
with open('german-traffic-signs/train.p', 'rb') as f:
  train_data = pickle.load(f) # dictionery of data
with open('german-traffic-signs/valid.p', 'rb') as f:
  val_data = pickle.load(f) # dictionery of data
with open('german-traffic-signs/test.p', 'rb') as f:
  test_data = pickle.load(f) # dictionery of data
print(type(train_data))

X_train , y_train = train_data['features'], train_data['labels']
X_val , y_val = val_data['features'], val_data['labels']
X_test, y_test = test_data['features'], test_data['labels']

# shape of the datasets
print(X_train.shape)
print(X_val.shape)
print(X_test.shape)

# check if the data is loaded correctly
assert(X_train.shape[0] == y_train.shape[0]),"The number of images is not equal to the number of labels"
assert(X_val.shape[0] == y_val.shape[0]),"The number of images is not equal to the number of labels"
assert(X_test.shape[0] == y_test.shape[0]),"The number of images is not equal to the number of labels"

assert(X_train.shape[1:] == (32,32,3)),"The dimensions of the images are not 32*32*3"
assert(X_val.shape[1:] == (32,32,3)),"The dimensions of the images are not 32*32*3"
assert(X_test.shape[1:] == (32,32,3)),"The dimensions of the images are not 32*32*3"

# using pandas to load csv file named sign names with all the traffic sign names
data = pd.read_csv('german-traffic-signs/signnames.csv')
num_of_samples = []

cols = 5
num_classes = 43

fig, axs = plt.subplots(nrows=num_classes, ncols = cols, figsize=(5, 50))
fig.tight_layout()
for i in range(cols):
      for j, row in data.iterrows():
        x_selected = X_train[y_train == j]
        axs[j][i].imshow(x_selected[random.randint(0,(len(x_selected) - 1)), :, :], cmap=plt.get_cmap('gray'))
        axs[j][i].axis("off")
        if i == 2:
          axs[j][i].set_title(str(j) + " - " + row["SignName"])
          num_of_samples.append(len(x_selected))

# Summary of the datasets


print(num_of_samples)
plt.figure(figsize=(12, 4))
plt.bar(range(0, num_classes), num_of_samples)
plt.title("Distribution of the train dataset")
plt.xlabel("Class number")
plt.ylabel("Number of images")
plt.show()

# preprocessing data
import cv2

plt.imshow(X_train[1000])
plt.axis("off")
print(X_train[1000].shape)
print(y_train[1000])

# preprocessing technique , step 1 : grayscale

def grayscale(img):
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    return img
  
#gray = cv2.cvtColor(X_train[1000], cv2.COLOR_BGR2GRAY)
img = grayscale(X_train[1000])
plt.imshow(img)
plt.axis("off")
print(img.shape)

# step 2 histogram equalisation : manage lighting effect , helps in feature extraction
def equalize(img):
  img = cv2.equalizeHist(img)
  return img
img = equalize(img)
plt.imshow(img)
plt.axis("off")
print(img.shape)

# final preprocessing function
def preprocessing(img):
  img = grayscale(img)
  img = equalize(img)
  img = img/255 # NORMALISATION
  return img

X_train = np.array(list(map(preprocessing, X_train)))
X_val = np.array(list(map(preprocessing, X_val)))
X_test = np.array(list(map(preprocessing, X_test)))

plt.imshow(X_train[random.randint(0, len(X_train)-1)])
plt.axis("off")
print(X_train.shape)

X_train = X_train.reshape(34799, 32, 32, 1)
X_val = X_val.reshape(4410, 32, 32, 1)
X_test = X_test.reshape(12630, 32, 32, 1)

# data augmentation - optimizing the traffic sign detecting algorithm
from keras.preprocessing.image import ImageDataGenerator

datagen = ImageDataGenerator(width_shift_range=0.1, # horizontal transformation/of centered img
                  height_shift_range=0.1, # 
                  zoom_range=0.2,         #
                  shear_range=0.1,    
                  rotation_range=10)
datagen.fit(X_train)

# generate images
batches = datagen.flow(X_train, y_train , batch_size=20)
X_batch , y_batch = next(batches)

fig, axs = plt.subplots(1, 15, figsize=(20, 5))
fig.tight_layout()

for i in range(15):
  axs[i].imshow(X_batch[i].reshape(32, 32))
  axs[i].axis('off')

print(X_train.shape)
print(X_val.shape)
print(X_test.shape)

y_train = to_categorical(y_train, 43)
y_test = to_categorical(y_test, 43)
y_val = to_categorical(y_val, 43)

def modified_lenet_model():
  # create the model
  model = Sequential()
  # add convolution layer 1
  model.add(Conv2D(60, (5, 5), input_shape=(32,32,1), activation='relu', strides=1))
  model.add(Conv2D(60, (5, 5), activation='relu', strides=1))
  # add pooling layer 1
  model.add(MaxPooling2D(pool_size=(2,2)))
  # add convolution layer 2
  model.add(Conv2D(30, (3,3), activation = 'relu', strides=1))
  model.add(Conv2D(30, (3,3), activation = 'relu', strides=1))
  # add pooling layer 2
  model.add(MaxPooling2D(pool_size=(2,2)))
  # drop out
  #model.add(Dropout(0.5))
  # flatten
  model.add(Flatten())
  # add hidden 1
  model.add(Dense(500, activation='relu'))
  # add hidden 2
  #model.add(Dense(300, activation='relu'))
  # add dropout layer , drops or shuts down nodes to decrease overfitting and generalisation error
  model.add(Dropout(0.5))
  # output layer 
  model.add(Dense(num_classes, activation='softmax'))
  # compiling the model
  model.compile(Adam(lr=0.001), loss='categorical_crossentropy', metrics=['accuracy'])
  return model

model = modified_lenet_model()
print(model.summary())

# history
history = model.fit_generator(datagen.flow(X_train,y_train, batch_size=50), steps_per_epoch=2000, epochs=10, validation_data=(X_val, y_val), shuffle=1)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.legend(['loss', 'val_loss'])
plt.title('Loss')
plt.xlabel('epoch')

plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.legend(['acc', 'val_acc'])
plt.title('Accuracy')
plt.xlabel('epoch')

# performance of the model 

# testing
score = model.evaluate(X_test, y_test, verbose=0)
print(type(score))
print('Test score:', score[0])
print('Test accuracy:', score[1])

# testing with real images
import requests
from PIL import Image

url = 'https://c8.alamy.com/comp/J2MRAJ/german-road-sign-bicycles-crossing-J2MRAJ.jpg'
url1= 'https://c8.alamy.com/comp/A0RX23/cars-and-automobiles-must-turn-left-ahead-sign-A0RX23.jpg'
url2= 'https://previews.123rf.com/images/bwylezich/bwylezich1608/bwylezich160800375/64914157-german-road-sign-slippery-road.jpg'
url3= 'https://previews.123rf.com/images/pejo/pejo0907/pejo090700003/5155701-german-traffic-sign-no-205-give-way.jpg'
url4= 'https://c8.alamy.com/comp/G667W0/road-sign-speed-limit-30-kmh-zone-passau-bavaria-germany-G667W0.jpg'

r = requests.get(url1, stream=True)
img = Image.open(r.raw)
plt.imshow(img, cmap=plt.get_cmap('gray'))

#Preprocess image

img = np.asarray(img)
img = cv2.resize(img, (32, 32))
img = preprocessing(img)
plt.imshow(img, cmap = plt.get_cmap('gray'))
print(img.shape)

#Reshape reshape
img = img.reshape(1, 32, 32, 1)
#Test image
print("predicted sign: "+ str(model.predict_classes(img)))

